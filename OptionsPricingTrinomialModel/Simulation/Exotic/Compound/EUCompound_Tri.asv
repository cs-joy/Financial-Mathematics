% EUCompound_Tri returns the full price tree for CoC option
% Current price (at t=0) will be at position P(round(T1*N/T2)+1,1)
% Necessary to round off number of steps to fit time until expiration T1
% and T2
%
% Stock price tree calculated first until time T1
% Then calculating underlying option prices in different nodes at T1
% Obtain payoff for CoC in each node at time T1
% Regressive algorithm to obtain prices of CoC at each time t<T1

function currentPrice = EUCompound_Tri(S0, T1, T2, N, K1, K2, p, r, sigma)
    % Checking input arguments
    if (r<0) || (T1<0) || (T2<0) || (K1<0) || (K2<0)
        disp('Error: invalid input parameters');
        P=0;
    
        return
    end
    
    h=T2/N;
    u=sigma*sqrt(h/(2*p));
    
    % Number of steps for compound and underlying option
    N1=round(T1*N/T2);
    N2=round(N-N1);

    % Choosing payoff functions
    %g1=['max(0, x-' num2str(K1) ')'];
    payoff_underlying = @(x) max(0, K2 - x);
    %g2=['max(0, x-' num2str(K2) ')'];
    payoff_compound = @(x) max(0, x - K1);

    S=StockPricesnew(S0, N1, u);
    M=size(S,1);
    P=zeros(M,N1+1); % Compound option prices
    Und_prices=zeros(M,1);

    % Calculating underlying asset prices at time T1
    for i=1:M
        S_temp=StockPricesnew(S(i,N1+1), N2, u);
        %Und_temp=OptionPrices_h(S_temp, g2, r, p, h, u);
        Und_temp=OptionPrices_h(S_temp, payoff_underlying, r, p, h, u);
        Und_prices(i,1)=Und_temp(N2+1,1);
    end

    % Calculate final prices, i.e. payoffs, of compound option
    % syms x;
    % f = str2sym(g1);
    % P(:,N1+1)=subs(f,x,Und_prices(:,1));
    for i=1:M
        P(i, N1+1) = payoff_compound(Und_prices(i,1));
    end
    
    q0 = 1 - 2*p;
    qu=(exp(r*h)-exp(-u))/(exp(u)-exp(-u))-q0*(1-exp(-u))/(exp(u)-exp(-u));
    qd=(exp(u)-exp(r*h))/(exp(u)-exp(-u))-q0*(exp(u)-1)/(exp(u)-exp(-u));

    % Recurrence formula to calculate option prices
    for j=N1:-1:1
        for i=(N1-j+2):(M-(N1-j+1))
            P(i,j)=exp(-r*h)*(qu*P(i-1,j+1)+q0*P(i,j+1)+qd*P(i+1,j+1));
        end
    end

    % Extract the current price at time 0 (center of the first column)
    currentPrice = P(N1+1, 1);
end